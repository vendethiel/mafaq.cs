// <auto-generated />
using MaFAQ.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MaFAQ.Migrations
{
    [DbContext(typeof(FaqContext))]
    [Migration("20180512171748_add_token")]
    partial class add_token
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MaFAQ.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorUserId");

                    b.Property<string>("Body");

                    b.Property<int?>("QuestionId");

                    b.HasKey("AnswerId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MaFAQ.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcceptedAnswerId");

                    b.Property<int?>("AuthorUserId");

                    b.Property<string>("Body");

                    b.Property<string>("Title");

                    b.HasKey("QuestionId");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MaFAQ.Models.QuestionTag", b =>
                {
                    b.Property<int>("QuestionId");

                    b.Property<int>("TagId");

                    b.HasKey("QuestionId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTag");
                });

            modelBuilder.Entity("MaFAQ.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MaFAQ.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Password");

                    b.Property<string>("Token");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MaFAQ.Models.Answer", b =>
                {
                    b.HasOne("MaFAQ.Models.User", "Author")
                        .WithMany("Answers")
                        .HasForeignKey("AuthorUserId");

                    b.HasOne("MaFAQ.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("MaFAQ.Models.Question", b =>
                {
                    b.HasOne("MaFAQ.Models.User", "Author")
                        .WithMany("Questions")
                        .HasForeignKey("AuthorUserId");
                });

            modelBuilder.Entity("MaFAQ.Models.QuestionTag", b =>
                {
                    b.HasOne("MaFAQ.Models.Question", "Question")
                        .WithMany("QuestionTags")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MaFAQ.Models.Tag", "Tag")
                        .WithMany("QuestionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
